// ******************************************************************************************************************** //
global proc string locusPicker:filterMapNode(string $nodes[], string $character, string $subSet) {
	for ($node in $nodes)
	{
		if ((`getAttr ($node + ".characterName")` == $character) && (`getAttr ($node + ".subSetName")` == $subSet))
			return $node;
	}
	return "None";
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:filterMapNodeCharacter(string $nodes[], string $character) {
	string $result[];
	for ($node in $nodes)
	{
		if (`getAttr ($node + ".characterName")` == $character)
			$result[size($result)] = $node;
	}
	return $result;
}
// ******************************************************************************************************************** //
global proc string locusPicker:createMapNode(string $character, string $subSet) {
	string 	$nodeName = ("locusPicker_" + $character + "_" + $subSet);
			$nodeName = `createNode -n $nodeName geometryVarGroup`;
	locusPicker:addAttr($nodeName, "string", {"characterName","subSetName","prefix","bgSize"});
	locusPicker:addAttr($nodeName, "int", {"tabOrder"});
	locusPicker:addAttr($nodeName, "bool", {"usePrefix", "useBgColor", "locusPickerMap"});
	locusPicker:addAttr($nodeName, "string", {"bgImage", "bgColor"});
	setAttr ($nodeName+".characterName") -type "string" $character;
	setAttr ($nodeName+".subSetName") -type "string" $subSet;
	locusPicker:addAttrDefaultArray($nodeName);
	return $nodeName;
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:getStringArray(string $node, string $attr) {
	string $result[];
	string $plug = ($node+"."+$attr);
	if (`objExists $plug`){
		int	$count = `getAttr -s $plug` ;
		for($i=0; $i<$count; $i++)
			$result[size($result)] = `getAttr ($plug+"["+$i+"]")` ;
	}
	return $result ;
}
// ******************************************************************************************************************** //
global proc locusPicker:addAttr(string $node, string $type, string $attrList[]) {
	for($attr in $attrList){
		string $plug = ($node+"."+$attr);
		if		($type=="string"){
			if (!`objExists $plug`)
				addAttr -ln $attr -dt "string" $node ;
		}
		else if	($type=="int"){
			if (!`objExists $plug`)
				addAttr -ln $attr -at "long" $node ;
		}
		else if	($type=="float"){
			if (!`objExists $plug`)
				addAttr -ln $attr -at "double" $node ;
		}
		else if	($type=="bool"){
			if (!`objExists $plug`)
				addAttr -ln $attr -at "bool" $node ;
		}
		else if	($type=="stringArray"){
			if (`objExists $plug`)	deleteAttr ($plug);
			addAttr -ln $attr -dt "string" -multi $node ;
		}
		else if	($type=="intArray"){
			if (`objExists $plug`)	deleteAttr ($plug);
			addAttr -ln $attr -at "long" -multi $node ;
		}
		else if	($type=="floatArray"){
			if (`objExists $plug`)	deleteAttr ($plug);
			addAttr -ln $attr -at "float" -multi $node ;
		}
		else if ($type=="message"){
			if (!`objExists $plug`)
				addAttr -ln $attr -at "message" $node;
		}
		else if ($type=="messageArray"){
			if (`objExists $plug`)	deleteAttr ($plug);
			addAttr -ln $attr -at "message" -multi $node;
		}
	}
}
// ******************************************************************************************************************** //
global proc locusPicker:addAttrDefaultArray(string $map) {
	locusPicker:addAttr($map, "stringArray", locusPicker:getDefaultStringAttrs());
}
// ******************************************************************************************************************** //
global proc locusPicker:addAttrToGeoBgButton (string $geoButton) {
	move -a 0 0 0 ($geoButton + ".scalePivot") ($geoButton + ".rotatePivot");
    locusPicker:addAttr($geoButton, "string", {"characterName", "subSetName"});    
    setAttr ($geoButton + ".overrideEnabled") 1;
    setAttr ($geoButton + ".overrideDisplayType") 2;
}
// ******************************************************************************************************************** //
global proc locusPicker:addAttrToGeoButton (string $geoButton){
	//string $defaultAttrs[] = `locusPicker:getDefaultStringAttrs()`;
	//string $removeAttrs[] = {"position", "size"};
	//string $diff[] = stringArrayRemove($defaultAttrs, $removeAttrs);  
	//locusPicker:addAttr($geoButton, "string", $diff);
	locusPicker:addAttr($geoButton, "string", locusPicker:getGeoButtonStringAttrs());
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:getDefaultStringAttrs() {
	return {"type", "position", "size", "color", "command", "node", "channel", "value", "label", "icon", "hashcode"};
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:getGeoButtonStringAttrs() {
	return {"type", "command", "node", "channel", "value", "label", "icon"};
}
// ******************************************************************************************************************** //
global proc locusPicker:doSelect(string $nodes[], string $action) {
	string $existingNodes[];
	for ($node in $nodes) {
		if (`objExists $node`)		$existingNodes[size($existingNodes)] = $node;
	}
	if ($action == "replace")		select -r $existingNodes;
	else if ($action == "add")		select -add $existingNodes;
	else if ($action == "deselect")	select -d $existingNodes;
	else if ($action == "toggle")	select -tgl $existingNodes;
}
// ******************************************************************************************************************** //
global proc locusPicker:doToggle(string $nodes[], string $attrs[]) {
	//string $result[];
	string	$attrsForThisNode[];
	string	$availableAttrs[];
	for ($node in $nodes) {
		if (!(`objExists $node`)) {
			print ("Not exists " + $node + "\n");
			continue;
		}
		clear($attrsForThisNode);clear($availableAttrs);
		$availableAttrs		= 	`listAttr -k -u -s -sn $node`;
		$availableAttrs = stringArrayRemoveDuplicates(stringArrayCatenate($availableAttrs, `listAttr -cb -s -sn $node`));
		
		if (size($attrs)==0)	$attrsForThisNode = $availableAttrs;
		else					$attrsForThisNode = $attrs;
		for ($attr in $attrsForThisNode) {
			string $plug = ($node+"."+$attr);
			if ((stringArrayContains($attr, $availableAttrs)) && (`attributeQuery -n $node -rangeExists $attr`)) {
				//if (`getAttr -se $plug`)
				{
					float $val = `getAttr $plug`;
					float $range[] = `attributeQuery -n $node -range $attr`; 
					float $half = $range[1] / 2.0;
					if ($val < $half)		$val = $range[1];
					else					$val = $range[0];
					catchQuiet(`setAttr $plug $val`);
				}
				/*
				else {
					$result[size($result)] = ("[Lock] "+$plug);
				}
				*/
			}
			/*
			else {
				$result[size($result)] = ("[NotMatch] "+$plug);
			}
			*/
		}
	}
	//return $result;
}
// ******************************************************************************************************************** //
global proc locusPicker:doKey(string $nodes[], string $attrs[]) {
	//string $result[];
	string		$attrsForThisNode[];
	string		$availableAttrs[];
	for ($node in $nodes) {
		if (!(`objExists $node`)) {
			print ("Not exists " + $node + "\n");
			continue;
		}
		clear($attrsForThisNode);clear($availableAttrs);
		$availableAttrs		=	 `listAttr -k -u -s -sn $node`;
		
		if (size($attrs)==0)	$attrsForThisNode = $availableAttrs;
		else					$attrsForThisNode = $attrs;
		for ($attr in $attrsForThisNode) {
			string $plug = ($node+"."+$attr);
			if ( stringArrayContains($attr, $availableAttrs) ) {
				if (`getAttr -k $plug `)	setKeyframe $plug;
				/*
				if (!`setKeyframe $plug`)
				{
					$result[size($result)] = ("[Fail] "+$plug);
				}
				*/
			}
			/*
			else {
				$result[size($result)] = ("[NotExist] "+$plug);
			}
			*/
		}
	}
	//return $result;
}
// ******************************************************************************************************************** //
global proc locusPicker:doReset(string $nodes[], string $attrs[]) {
	//string $result[];
	string	$attrsForThisNode[];
	string	$availableAttrs[];
	for ($node in $nodes) {
		if (!(`objExists $node`)) {
			print ("Not exists " + $node + "\n");
			continue;
		}
		clear($attrsForThisNode);clear($availableAttrs);
		$availableAttrs = `listAttr -k -u -s -sn $node`;
		$availableAttrs = stringArrayRemoveDuplicates(stringArrayCatenate($availableAttrs, `listAttr -cb -s -sn $node`));
		
		if (size($attrs)==0) $attrsForThisNode = $availableAttrs;
		else $attrsForThisNode = $attrs;
		
		for ($attr in $attrsForThisNode) {
			string $plug = ($node+"."+$attr);
			if ( stringArrayContains($attr, $availableAttrs) ) {
				//if (`getAttr -se $plug`)
				{
					float $defaultValue = locusPicker:getDefaultValue($node, $attr);
					catchQuiet(`setAttr $plug $defaultValue`);
				}
				/*
				else {
					$result[size($result)] = ("[Lock] "+$plug);
				}
				*/				
			}
			/*
			else {
				$result[size($result)] = ("[NotExist] "+$plug);
			}
			*/
		}
		//$startTime2		=	`timerX`;
	}
	//return $result;
}
// ******************************************************************************************************************** //
global proc locusPicker:doRange(string $nodes[], string $attrs[], float $value) {
	//string $result[];
	string	$availableAttrs[];
	for ($node in $nodes) {
		clear($availableAttrs);
		$availableAttrs = `listAttr -k -u -s -sn $node`;
		$availableAttrs = stringArrayRemoveDuplicates(stringArrayCatenate($availableAttrs, `listAttr -cb -s -sn $node`));
		
		for ($attr in $attrs) {
			string $plug = ($node+"."+$attr);
			if ( stringArrayContains($attr, $availableAttrs) ) {
				//if (`getAttr -se $plug`)
				{
					float $rangeValue[] = locusPicker:getWeightRange($node, $attr);
					//print ($node + ":" + $attr + ":" + $rangeValue[0] + "," + $rangeValue[1] + "," + $rangeValue[2] + "\n");
					float $v;
					if ($value == 0)			$val = $rangeValue[1];
					else if ($value == -1)		$val = $rangeValue[0];
					else if ($value == 1)		$val = $rangeValue[2];
					else if (($value < 0) && ($value > -1)) {
						float $calValue = $rangeValue[0] - $rangeValue[1];
						$val = $calValue*(0-$value) + $rangeValue[1];
					}
					else {
						float $calValue = $rangeValue[2] - $rangeValue[1]; 
						$val = $calValue*$value + $rangeValue[1];
					}
					setAttr $plug $val;
				}
				/*
				else {
					$result[size($result)] = ("[Lock] "+$plug);
				}
				*/				
			}
			/*
			else {
				$result[size($result)] = ("[NotExist] "+$plug);
			}
			*/
		}
	}
	//return $result;
}
// ******************************************************************************************************************** //
global proc float[] locusPicker:getWeightRange(string $node, string $attr) {
	float $result[];
	float $val[];
	if (`attributeQuery -minExists -n $node $attr `){	
		$val = `attributeQuery -min -n $node $attr`;
		$result[0] = $val[0];
	}
	else {
		int	$attrType = locusPicker:isTransformAttr($node, $attr);
		if($attrType) {
			float $range[] = `transformLimits -q ("-"+$attr) $node `;
			if(size($range)) {
				$result[0] = $range[0];
			}
			else {
				$result[0] = -1.0;
			}
		}
		else {
			$result[0] = -1.0;
		}
	}
	
	$val = `attributeQuery -n $node -listDefault $attr`;
	if (size($val)) {
		$result[1] = $val[0];
	}
	else {
		$result[1] = 0.0;
	}
	
	if (`attributeQuery -maxExists -n $node $attr `){	
		$val = `attributeQuery -max -n $node $attr`;
		$result[2] = $val[0];
	}
	else {
		int	$attrType = locusPicker:isTransformAttr($node, $attr);
		if($attrType) {
			float $range[] = `transformLimits -q ("-"+$attr) $node `;
			if(size($range)) {
				$result[2] = $range[1];
			}
			else {
				$result[2] = 1.0;
			}
		}
		else {
			$result[2] = 1.0;
		}
	}
	return $result;
}
// ******************************************************************************************************************** //
global proc int locusPicker:isTransformAttr (string $node, string $attr) {	
	// returns 0 for non-transformation attr, 1 for transformation attr, 2 for a scale attr.
	string	$plugType = `getAttr -type ($node+"."+$attr)`;
	if(($plugType=="doubleLinear")||($plugType=="doubleAngle"))	return 1;
	if($plugType=="double"){//scale?
		string	$scales[] = {"sx","sy","sz","scaleX","scaleY","scaleZ"};
		if(stringArrayContains($attr, $scales))	return 2;
	}
	return 0;
}
// ******************************************************************************************************************** //
global proc matrix locusPicker:getStartValues(string $nodes[], string $attrs[], matrix $result[][])
{
	int 	$i = 0;
	string	$plug;
	float	$value;
	for ($node in $nodes)
	{
		int $j=0;
		for ($attr in $attrs)
		{
			$plug = ($node+"."+$attr);
			if (`objExists $plug`)		$value = `getAttr $plug`;
			else						$value = 0.0;
			$result[$i][$j] = $value;
			$j++;
		}
		$i++;
	}
	return $result;
}
// ******************************************************************************************************************** //
global proc matrix locusPicker:getAllDefaultValues(string $nodes[], string $attrs[], matrix $result[][])
{
	int		$i = 0;
	string	$plug;
	float	$value;
	for ($node in $nodes)
	{
		int $j=0;
		for ($attr in $attrs)
		{
			$plug = ($node+"."+$attr);
			if (`objExists $plug`)		$value = locusPicker:getDefaultValue($node, $attr);
			else						$value = 0.0;
			$result[$i][$j] = $value;
			$j++;
		}
		$i++;
	}
	return $result;
}
// ******************************************************************************************************************** //
global proc locusPicker:doPose(string $nodes[], string $attrs[], matrix $startValueMatrix[][], matrix $targetValueMatrix[][], float $value) {
	//string $result[];
	int 	$i = 0;
	int 	$j = 0;
	string	$availableAttrs[];
	
	for ($node in $nodes) {
		clear($availableAttrs);
		$availableAttrs	=	`listAttr -k -u -s -sn $node`;
		$availableAttrs = stringArrayRemoveDuplicates(stringArrayCatenate($availableAttrs, `listAttr -cb -s -sn $node`));
		
		$j = 0;
		for ($attr in $attrs) {
			if ( stringArrayContains($attr, $availableAttrs) ) {
				string $plug = ($node+"."+$attr);
				//if (`getAttr -se $plug`)
				{
					float $targetValue = $targetValueMatrix[$i][$j];
					float $startValue = $startValueMatrix[$i][$j];					
					float $calValue = $targetValue-$startValue;
					if (abs($calValue) > 0.001)		catchQuiet(`setAttr $plug ($calValue*$value+$startValue)`);
				}
				/*
				else {
					$result[size($result)] = ("[Lock] "+$plug);
				}
				*/				
			}
			/*
			else {
				$result[size($result)] = ("[NotExist] "+$plug);
			}
			*/
		$j++;
		}
	$i++;
	}
	//return $result;
}
// ******************************************************************************************************************** //
global proc locusPicker:doPoseFromDefault(string $nodes[], string $attrs[], matrix $targetValueMatrix[][], float $value) {
	int 	$i = 0;
	int 	$j = 0;
	string	$availableAttrs[]; 
	for ($node in $nodes) {
		if (!`objExists $node`)		{print ("Not exists: "+$node+"\n");continue;}
		clear($availableAttrs);
		$availableAttrs = `listAttr -k -u -s -sn $node`;
		$availableAttrs = stringArrayRemoveDuplicates(stringArrayCatenate($availableAttrs, `listAttr -cb -s -sn $node`));
		
		$j = 0;
		for ($attr in $attrs) {
			string $plug = ($node+"."+$attr);
			if (stringArrayContains($attr, $availableAttrs)) {
				//if (`getAttr -se $plug`)
				{
					/*float $startValue = locusPicker:getDefaultValue($node, $attr);
					float $targetValue = $targetValueMatrix[$i][$j];					
					float $calValue = $targetValue-$startValue;
					setAttr $plug ($calValue*$value+$startValue);*/
					if ($value == 1)	catchQuiet(`setAttr $plug ($targetValueMatrix[$i][$j]*$value)`);
					else				catchQuiet(`setAttr $plug ($targetValueMatrix[$i][$j]*$value+(1.0-$value)*locusPicker:getDefaultValue($node, $attr))`);
				}
			}
		$j++;
		}
	$i++;
	}
}
// ******************************************************************************************************************** //
global proc float locusPicker:getDefaultValue(string $node, string $attr) {
	float $defaultVal[];
	$defaultVal = `attributeQuery -n $node -listDefault $attr`;
	if (size($defaultVal))		return $defaultVal[0];
	else						return 0;
}
// ******************************************************************************************************************** //
global proc locusPicker:assignMapData(string $node, string $bgSize, int $tabOrder, int $useBgColor, string $bgImage, string $bgColor, int $usePrefix, string $prefix) {
	//print ("locusPicker:assignMapData "+$node+" "+$tabOrder+"\n");
	setAttr ($node+".bgSize") -type "string" $bgSize;
	setAttr ($node+".tabOrder") $tabOrder;
	setAttr ($node+".useBgColor") $useBgColor;
	setAttr ($node+".bgImage") -type "string" $bgImage;
	setAttr ($node+".bgColor") -type "string" $bgColor;
	setAttr ($node+".usePrefix") $usePrefix;
	setAttr ($node+".prefix") -type "string" $prefix;
	//print ("Finished Assigning Tab Data\n");
}
// ******************************************************************************************************************** //
global proc locusPicker:assignButtonData(string $node, string $types[], string $pos[], string $sizes[], string $colors[], string $commands[],
			string $targetNodes[], string $targetChannels[], string $targetValues[], string $labels[], string $icons[], string $hashcodes[]) {
	locusPicker:addAttrDefaultArray($node);
	for ($i=0; $i<size($types); $i++) {
		setAttr ($node + ".type["+ $i + "]") -type "string" $types[$i];	
		setAttr ($node + ".position["+ $i + "]") -type "string" $pos[$i];
		setAttr ($node + ".size["+ $i + "]") -type "string" $sizes[$i];
		setAttr ($node + ".color["+ $i + "]") -type "string" $colors[$i];
		setAttr ($node + ".command["+ $i + "]") -type "string" $commands[$i];
		setAttr ($node + ".node["+ $i + "]") -type "string" $targetNodes[$i];
		setAttr ($node + ".channel["+ $i + "]") -type "string" $targetChannels[$i];
		setAttr ($node + ".value["+ $i + "]") -type "string" $targetValues[$i];
		setAttr ($node + ".label["+ $i + "]") -type "string" $labels[$i];
		setAttr ($node + ".icon["+ $i + "]") -type "string" $icons[$i];
		setAttr ($node + ".hashcode["+ $i + "]") -type "string" $hashcodes[$i];
	}
	//print ("Finished Assigning Button Data\n");
}
// ******************************************************************************************************************** //
global proc string locusPicker:buildMapPopupMenu(string $control, string $windowName, int $isEditor) {
	string $menu = `popupMenu -p $control -markingMenu true -ctl true -b 3 locusPicker:popupMenu`;
	if ($isEditor)
		popupMenu -e -pmc ("locusPicker:checkStateForPopupMenu(\""+$windowName+"\")") $menu;
		
	menuItem -l "Select All" 	-bld 1	-rp "N"		-stp python -c ($windowName + ".selectCurrentAllItems()")	locusPicker:selectAllMenu;
	menuItem -l "Reset All" 	-bld 1	-rp "W" 	-stp python -c ($windowName + ".resetAll()")				locusPicker:restAllMenu;
	menuItem -l "Reset Transform" 		-rp "NW" 	-stp python -c ($windowName + ".resetTransform()")			locusPicker:resetTransformMenu;
	menuItem -l "Reset Defined" 		-rp "SW" 	-stp python -c ($windowName + ".resetDefined()")			locusPicker:resetDefinedMenu;
	menuItem -l "Key All"		-bld 1	-rp "E" 	-stp python -c ($windowName + ".keyAll()")					locusPicker:keyAllMenu;
	menuItem -l "Key Transform" 		-rp "NE" 	-stp python -c ($windowName + ".keyTrasnform()")			locusPicker:keyTransformMenu;
	menuItem -l "Key Defined"			-rp "SE" 	-stp python -c ($windowName + ".keyDefined()")				locusPicker:keyDefinedMenu;
	menuItem -l "List Selected" -bld 1	-rp "S" 	-stp python -c ($windowName + ".showSelectedList()")		locusPicker:showSelectListMenu;
	/*
	menuItem -l "Select All" -bld 1 -rp "N" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','selectCurrentAllItems()')");
	menuItem -l "Reset All" -bld 1 -rp "W" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','resetAll()')");
	menuItem -l "Reset Transform" -rp "NW" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','resetTransform()')");	
	menuItem -l "Reset Defined" -rp "SW" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','resetDefined()')");
	menuItem -l "Key All" -bld 1 -rp "E" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','keyAll()')");
	menuItem -l "Key Transform" -rp "NE" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','keyTrasnform()')");
	menuItem -l "Key Defined" -rp "SE" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','keyDefined()')");
	menuItem -l "List Selected" -bld 1 -rp "S" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','showSelectedList()')");*/
	setParent -menu ..;	
	menuItem -l "Load Map File" 					-stp python -c ($windowName + ".loadDataFromFile()")		locusPicker:LoadFileMenu;
	if ($isEditor)
	{
		menuItem -l "Save Current Map to File" 			-stp python -c ($windowName + ".saveCurrentToFile()")	locusPicker:saveFileMenu;
		menuItem -l "Save Current Map to Node"		-stp python -c ($windowName + ".assignDataToNode()")		locusPicker:assignMenu;
	}
	menuItem -l "Refresh" 							-stp python -c ($windowName + ".refresh()")					locusPicker:refreshMenu;
	/*menuItem -l "Load Map File" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','loadDataFromFile()')");
	menuItem -l "Save Current Map to File" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','saveCurrentToFile()')");
	menuItem -l "Save Current Map to Node" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','assignDataToNode()')") locusPicker:assignMenu;
	menuItem -l "Refresh" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','refresh()')");*/
	menuItem -divider true;
	if ($isEditor)
		menuItem -l "Additional Tool Box"			-stp python -c ($windowName + ".showToolDialog()")			locusPicker:toolBoxMenu;
	menuItem -l "Help Info" 						-stp python -c ($windowName + ".openInfoDocumentUrl()")		locusPicker:helpMenu;
	/*menuItem -l "Additional Tool Box" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','showToolDialog()')");
	menuItem -l "Help Info" -stp python
		-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','openInfoDocumentUrl()')");*/
	setParent -menu ..;
	if ($isEditor)
	{
		menuItem -l "Limit Editable Area" -cb 1		-stp python -c ($windowName + ".coopUpCurrentScene()") 		locusPicker:coopMenu;
		menuItem -l "Create Button Group" 			-stp python -c ($windowName + ".createSelectedButtonGroup()") locusPicker:createButtonGroupMenu;
	}
    /*menuItem -l "Limit Editable Area" -cb 1 -stp python
    	-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','coopUpCurrentScene()')") locusPicker:coopMenu;
    menuItem -l "Create Button Group" -stp python
    	-c ("LocusPickerUI.executeInstMethod('"+$windowName+"','createSelectedButtonGroup()')") locusPicker:createButtonGroupMenu;*/    
    return $menu;
}
// ******************************************************************************************************************** //
global proc locusPicker:checkStateForPopupMenu(string $windowName) {	
	int $currentSceneCoop = python($windowName + ".isCurrentSceneCoop()");
	//int $currentSceneCoop = python("LocusPickerUI.executeInstMethod('"+$windowName+"','isCurrentSceneCoop()')");	
	int $itemSelected = python($windowName + ".isItemSelected()");
	//int $itemSelected = python("LocusPickerUI.executeInstMethod('"+$windowName+"','isItemSelected()')");
	int $canAssign = python($windowName + ".assignDataToNodeAct.isEnabled()");
	//int $canAssign = python("LocusPickerUI.executeInstMethod('"+$windowName+"','assignDataToNodeAct.isEnabled()')");
	
	menuItem -e -cb $currentSceneCoop	locusPicker:coopMenu;
	//meunItem -e 						locusPicker:toolBoxMenu;
	menuItem -e -en $canAssign 			locusPicker:assignMenu;
	menuItem -e -en $itemSelected 		locusPicker:createButtonGroupMenu;
}
// ******************************************************************************************************************** //
global proc string locusPicker:createShader (float $cR,float $cG,float $cB)
{
	string $shGr = "locusPickerSG#";
	string $shad = "locusPickerShader#";
	$shad = `shadingNode -asShader lambert -n $shad`;
	$shGr = ` sets -renderable true -noSurfaceShader true -empty -name $shGr ` ;
	connectAttr -f ($shad + ".outColor") ($shGr + ".surfaceShader") ;
	setAttr ( $shad + ".color")  -type double3 $cR $cG $cB ;
	locusPicker:addAttr($shGr, "int", {"locusPickerShadingGroup"});

	return $shGr;
}
// ******************************************************************************************************************** //
global proc string locusPicker:assignShader (string $node,float $cR,float $cG,float $cB)
{
	string	$shGrPrefix 	= "locusPickerSG";
	string	$shGrs[]		= ` ls ($shGrPrefix+"*") ` ;
	string	$sgWithThisCol 	=	"" ;
	for($shGr in $shGrs){
		string	$mat[]		=	` listConnections ($shGr+".surfaceShader") ` ;
		float 	$col[]		=	` getAttr ($mat[0]+".color") ` ;
		float	$mR			=	roundOff($col[0], 2);
		float	$mG			=	roundOff($col[1], 2);
		float	$mB			=	roundOff($col[2], 2);
		if(($cR==$mR)&&($cG==$mG)&&($cB==$mB)){
			$sgWithThisCol = $shGr ;
			break;
		}
	}
	if($sgWithThisCol =="")
		$sgWithThisCol = locusPicker:createShader($cR,$cG,$cB);
	string $shapes[0]	=	` listRelatives -s -f -type mesh $node ` ; 
	for ($shape in $shapes)		sets -e -forceElement $sgWithThisCol $shape ;

	return $sgWithThisCol ;
}
// ******************************************************************************************************************** //
global proc float roundOff (float $float, int $digitNum)
{
	if( $digitNum > 0 )
	{
		float $roundScale = pow(10, $digitNum);
		if( $float > 0 )
			return( ((float)(int)($float * $roundScale + 0.5)) /$roundScale );
		else
			return( ((float)(int)($float * $roundScale - 0.5)) /$roundScale );
  	}
  	else
  	{
  		float $roundScale = pow(10, -$digitNum);
  		if( $float > 0 )
  			return( ((float)(int)($float/$roundScale + 0.5)) *$roundScale );
  		else
  			return( ((float)(int)($float/$roundScale - 0.5)) *$roundScale );
	}
}
// ******************************************************************************************************************** //
global proc float[] locusPicker:getButtonColor (string $button) {
	string $shape[] = `listRelatives -s $button`;
	string $shadGrp[] = `listConnections ($shape[0] + ".instObjGroups")`;
	string $shader[] = `listConnections ($shadGrp[0] + ".surfaceShader")`;
	float $color[] = `getAttr ($shader[0] + ".color")`;
	return $color;
}
// ******************************************************************************************************************** //
global proc string locusPicker:createPlane(string $name, float $x, float $y, float $width, float $height, float $minWidth, float $minHeight, float $depth) {
	string $plane[] = `polyPlane -ax 0 0 1 -sx 1 -sy 1 -cuv 0 -ch 0`;
	move -0.5 0.5 0 ($plane[0] + ".scalePivot") ($plane[0] + ".rotatePivot");
	move 0.5 -0.5 0 $plane[0];
	makeIdentity -apply true -t 1 $plane[0];
    
    setAttr ($plane[0] + ".sx") $width;
    setAttr ($plane[0] + ".sy") $height;
    setAttr ($plane[0] + ".tx") $x;
    setAttr ($plane[0] + ".ty") $y;
    setAttr ($plane[0] + ".tz") ($depth/10.0);    
    /*
    setAttr -lock true -keyable false -channelBox false ($plane[0] + ".rx");
	setAttr -lock true -keyable false -channelBox false ($plane[0] + ".ry");
	setAttr -lock true -keyable false -channelBox false ($plane[0] + ".rz");
	setAttr -lock true -keyable false -channelBox false ($plane[0] + ".tz");
	setAttr -lock true -keyable false -channelBox false ($plane[0] + ".sz");
	*/
	
	if (($minWidth > 0) && ($minHeight > 0)) {
		transformLimits -sx $minWidth $minWidth -sy $minHeight $minHeight -esx 1 0 -esy 1 0 $plane[0];
	}
	
	locusPicker:addAttr($plane[0], "int", {"locusPickerConverted"});
	setAttr ($plane[0] + ".locusPickerConverted") $depth;
	
	//xform -cp $plane[0];
	string $planeName = `rename $plane[0] $name`;
	
	if (int($depth) == 0)			locusPicker:addAttrToGeoBgButton($planeName);
	else if (int($depth) == 1)		locusPicker:addAttrToGeoButton($planeName);
    return $planeName;  
}
// ******************************************************************************************************************** //
global proc locusPicker:setGeoModeModelView(string $bgButton) {
	setNamedPanelLayout "Single Perspective View";
	updateToolbox();
	lookThroughModelPanel front modelPanel4;
	modelEditor -edit -displayAppearance smoothShaded -activeOnly false modelPanel4;
	select -r $bgButton ;
	setFocus modelPanel4 ;
	viewFit -f 0.5 ;
}
// ******************************************************************************************************************** //
global proc locusPicker:setMapModeModelView() {
	setNamedPanelLayout "Single Perspective View";
	updateToolbox();
	select -cl ;
	viewFit -f 0.5 ;
}
// ******************************************************************************************************************** //
global proc locusPicker:setAttachToButton (string $button, string $attach) {
	string $scaleNode = `createNode -n ($attach + "_scaleDivide") multiplyDivide`;
	string $posNode = `createNode -n ($attach + "_posDivide") multiplyDivide`;
	locusPicker:addAttr($button, "float", {"attachPosX", "attachPosY", "attachScaleX", "attachScaleY"});
	setAttr -k false -cb true ($button + ".attachPosX");
	setAttr -k false -cb true ($button + ".attachPosY");
	setAttr -k false -cb true ($button + ".attachScaleX");
	setAttr -k false -cb true ($button + ".attachScaleY");
	float $attachPosX = (`getAttr($attach + ".tx")`) - (`getAttr($button + ".tx")`);
	float $attachPosY = (`getAttr($attach + ".ty")`) - (`getAttr($button + ".ty")`);
	float $attachScaleX = `getAttr($attach + ".sx")`;
	float $attachScaleY = `getAttr($attach + ".sy")`;
	setAttr ($button + ".attachPosX") $attachPosX;
	setAttr ($button + ".attachPosY") $attachPosY;
	setAttr ($button + ".attachScaleX") $attachScaleX;
	setAttr ($button + ".attachScaleY") $attachScaleY;
	connectAttr -f ($button + ".attachPosX") ($posNode + ".input1X");
	connectAttr -f ($button + ".attachPosY") ($posNode + ".input1Y");
	setAttr ($posNode + ".operation") 2;
	connectAttr -f ($button + ".scaleX") ($posNode + ".input2X");
	connectAttr -f ($button + ".scaleY") ($posNode + ".input2Y");
	connectAttr -f ($posNode + ".outputX") ($attach + ".translateX");	
	connectAttr -f ($posNode + ".outputY") ($attach + ".translateY");
	connectAttr -f ($button + ".attachScaleX") ($scaleNode + ".input1X");
	connectAttr -f ($button + ".attachScaleY") ($scaleNode + ".input1Y");
	setAttr ($scaleNode + ".operation") 2;
	connectAttr -f ($button + ".scale") ($scaleNode + ".input2");
	connectAttr -f ($scaleNode + ".output") ($attach + ".scale");
	parent $attach $button;
	setAttr -lock true -keyable false -channelBox false ($attach + ".tx");
	setAttr -lock true -keyable false -channelBox false ($attach + ".ty");
	setAttr -lock true -keyable false -channelBox false ($attach + ".sx");
	setAttr -lock true -keyable false -channelBox false ($attach + ".sy");
	setAttr ($attach + ".overrideEnabled") 1;
	setAttr ($attach + ".overrideDisplayType") 2;	
}
// ******************************************************************************************************************** //
global proc locusPicker:setAttrToGeoButton (string $buttonNode, string $type, string $command, string $node,
		string $channel, string $value, string $icon, string $label) {
	setAttr ($buttonNode + ".type") -type "string" $type;
	setAttr ($buttonNode + ".command") -type "string" $command;
	setAttr ($buttonNode + ".node") -type "string" $node;
	setAttr ($buttonNode + ".channel") -type "string" $channel;
	setAttr ($buttonNode + ".value") -type "string" $value;
	setAttr ($buttonNode + ".icon") -type "string" $icon;
	setAttr ($buttonNode + ".label") -type "string" $label;
}
// ******************************************************************************************************************** //
global proc locusPicker:removeConvertedButtons() {
	string $converted[]	= `ls ("*.locusPickerConverted")`;
	for ($conv in $converted){
		string $node[]; 
		tokenize($conv, ".", $node);	
		delete $node[0] ;
	}
	
	string $shadGrps[] = `ls ("*.locusPickerShadingGroup")`;
	for ($shadGrp in $shadGrps) {
		string $shdG[];
		tokenize($shadGrp, ".", $shdG);
		string $shader[] = `listConnections ($shdG[0] + ".surfaceShader")`;
		delete $shdG[0] $shader[0];
	}
}
// ******************************************************************************************************************** //
global proc locusPicker:setSliderToButton(string $button, string $slider, float $margin1, float $margin2, float $thickness, int $vertical, int $inverse) {
	locusPicker:addAttr($button, "float", {"margin1", "margin2", "thickness"});
	setAttr -k false -cb true ($button + ".margin1");
	setAttr -k false -cb true ($button + ".margin2");
	setAttr -k false -cb true ($button + ".thickness");
	setAttr ($button + ".margin1") $margin1;
	setAttr ($button + ".margin2") $margin2;
	setAttr ($button + ".thickness") $thickness;
	if ($vertical == -1) {
		return;
	}

	string $loc1[] = `spaceLocator -n ($slider + "_posLoc1")`;
	string $loc2[] = `spaceLocator -n ($slider + "_posLoc2")`;
	string $loc3[] = `spaceLocator -n ($slider + "_posLoc3")`;
	
	setAttr ($loc1[0] + ".v") 0;
	setAttr ($loc2[0] + ".v") 0;
	setAttr ($loc3[0] + ".v") 0;
	
	parent $loc3[0] $loc1[0];
	string $group2 = `group -n ($slider + "_posLocGrp2") $loc2[0]`;
	
	string $group = `group -n ($slider + "_localSpace") $loc1[0] $group2`;
	parent $group $button;
	xform -t 0 0 0 $group;
	xform -s 1 1 1 $group;
	
	string $node = `createNode multiplyDivide -n ($slider + "_scaleNode")`;
	setAttr ($node + ".operation") 2;
	if ($vertical == 1) {
		if ($inverse == 1)	setAttr ($node + ".input1Y") ((`getAttr ($button + ".sy")`) * -1.0);
		else				setAttr ($node + ".input1Y") (`getAttr ($button + ".sy")`);
		connectAttr -f ($button + ".sy") ($node + ".input2Y");
		connectAttr -f ($node + ".outputY") ($group + ".sy");
		if ($inverse == 1) setAttr ($group + ".ty") -1;
		setAttr ($group2 + ".tx") 1;
		setAttr ($group2 + ".sx") -1;
	}
	else {
		if ($inverse == 1)	setAttr ($node + ".input1X") ((`getAttr ($button + ".sx")`) * -1.0);
		else				setAttr ($node + ".input1X") (`getAttr ($button + ".sx")`);
		connectAttr -f ($button + ".sx") ($node + ".input2X");
		connectAttr -f ($node + ".outputX") ($group + ".sx");
		if ($inverse == 1) setAttr ($group + ".tx") 1;
		setAttr ($group2 + ".ty") -1;
		setAttr ($group2 + ".sy") -1;
	}
	
	setAttr ($loc1[0] +".tz") 2;
	setAttr ($loc2[0] +".tz") 2;
	
	string $scaleNode = `createNode multiplyDivide -n ($slider + "_scale")`;
	setAttr ($scaleNode + ".operation") 2;	
	string $multNode = `createNode multiplyDivide -n ($slider + "_attrMult")`;	
	connectAttr -f ($button + ".margin1") ($multNode + ".input1X");
	connectAttr -f ($button + ".margin2") ($multNode + ".input1Y");
	connectAttr -f ($button + ".thickness") ($multNode + ".input1Z");
	
	if ($vertical == 1) {
		setAttr ($multNode + ".input2X") 1;
		setAttr ($multNode + ".input2Y") 1;
		if ($inverse == 1)	setAttr ($multNode + ".input2Z") 1;
		else				setAttr ($multNode + ".input2Z") -1;
	}
	else {
		setAttr ($multNode + ".input2X") -1;
		setAttr ($multNode + ".input2Y") -1;
		if ($inverse == 1)	setAttr ($multNode + ".input2Z") -1;
		else				setAttr ($multNode + ".input2Z") 1;
	}
	
	connectAttr -f ($multNode + ".outputX") ($scaleNode + ".input1X");
	connectAttr -f ($multNode + ".outputY") ($scaleNode + ".input1Y");
	//connectAttr -f ($multNode + ".outputZ") ($scaleNode + ".input1Z");
	
	if ($vertical == 1) {
		connectAttr -f ($button + ".scaleX") ($scaleNode + ".input2X");
		connectAttr -f ($button + ".scaleX") ($scaleNode + ".input2Y");
		connectAttr -f ($button + ".scaleY") ($scaleNode + ".input2Z");
		
		connectAttr -f ($scaleNode + ".outputX") ($loc1[0] + ".tx");
		connectAttr -f ($scaleNode + ".outputY") ($loc2[0] + ".tx");
		
		setAttr ($loc1[0] + ".ty") (-0.3 / (`getAttr ($button + ".scaleY")`));
		setAttr ($loc2[0] + ".ty") (-0.3 / (`getAttr ($button + ".scaleY")`));
		
		connectAttr -f ($multNode + ".outputZ") ($loc3[0] + ".ty");
	}
	else {
		connectAttr -f ($button + ".scaleY") ($scaleNode + ".input2X");
		connectAttr -f ($button + ".scaleY") ($scaleNode + ".input2Y");
		connectAttr -f ($button + ".scaleX") ($scaleNode + ".input2Z");
		
		connectAttr -f ($scaleNode + ".outputX") ($loc1[0] + ".ty");
		connectAttr -f ($scaleNode + ".outputY") ($loc2[0] + ".ty");
		
		setAttr ($loc1[0] + ".tx") (0.3 / (`getAttr ($button + ".scaleX")`));
		setAttr ($loc2[0] + ".tx") (0.3 / (`getAttr ($button + ".scaleX")`));
		
		connectAttr -f ($multNode + ".outputZ") ($loc3[0] + ".tx");
	}
	
	string $decomposeNode1 = `createNode decomposeMatrix -n ($slider + "_decompose1")`;
	string $decomposeNode2 = `createNode decomposeMatrix -n ($slider + "_decompose2")`;
	connectAttr -f ($loc1[0] + ".worldMatrix[0]") ($decomposeNode1 + ".inputMatrix");
	connectAttr -f ($loc2[0] + ".worldMatrix[0]") ($decomposeNode2 + ".inputMatrix");
	string $plusCompose1 = `createNode plusMinusAverage -n ($slider + "_pma1")`;
	string $plusCompose2 = `createNode plusMinusAverage -n ($slider + "_pma2")`;
	connectAttr -f ($decomposeNode1 + ".outputTranslate") ($plusCompose1 + ".input3D[0]");
	if ($vertical == 1)		connectAttr -f ($loc3[0] + ".ty") ($plusCompose1 + ".input3D[1].input3Dy");
	else					connectAttr -f ($loc3[0] + ".tx") ($plusCompose1 + ".input3D[1].input3Dx");	
	connectAttr -f ($decomposeNode2 + ".outputTranslate") ($plusCompose2 + ".input3D[0]");
	if ($vertical == 1)		connectAttr -f ($loc3[0] + ".ty") ($plusCompose2 + ".input3D[1].input3Dy");
	else					connectAttr -f ($loc3[0] + ".tx") ($plusCompose2 + ".input3D[1].input3Dx");
	string $crv1 = `curve -d 1 -p 0 0 0 -p 0 -1 0 -k 0 -k 1`;
	$crv1 = `rename $crv1 ($slider + "_crv1")`;
	string $crv2 = `curve -d 1 -p 0 0 0 -p 0 -1 0 -k 0 -k 1`;
	$crv2 = `rename $crv2 ($slider + "_crv2")`;
	locusPicker:addAttr($crv1, "int", {"locusPickerConverted"});
	setAttr ($crv1 + ".locusPickerConverted") 2;
	locusPicker:addAttr($crv2, "int", {"locusPickerConverted"});
	setAttr ($crv2 + ".locusPickerConverted") 2;
	setAttr ($crv1 + ".v") 0;
	setAttr ($crv2 + ".v") 0;
	string $crvSh1[] = `listRelatives -s $crv1`;
	string $crvSh2[] = `listRelatives -s $crv2`;
	connectAttr -f ($decomposeNode1 + ".outputTranslate") ($crvSh1[0] + ".controlPoints[0]");
	connectAttr -f ($decomposeNode2 + ".outputTranslate") ($crvSh1[0] + ".controlPoints[1]");
	connectAttr -f ($plusCompose1 + ".output3D") ($crvSh2[0] + ".controlPoints[0]");
	connectAttr -f ($plusCompose2 + ".output3D") ($crvSh2[0] + ".controlPoints[1]");
	loft -n ($slider + "_surface") -ch 1 -u 1 -c 0 -d 1 -rn 0 -po 0 -rsn true $crv1 $crv2 ;
	//parent ($slider + "_surface") $button;
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.tx");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.ty");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.tz");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.rx");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.ry");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.rz");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.sx");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.sy");
	setAttr -lock true -keyable false -channelBox false ($slider + "_surface.sz");
	setAttr ($slider + "_surface.overrideEnabled") 1;
	setAttr ($slider + "_surface.overrideDisplayType") 2;	
	locusPicker:addAttr(($slider + "_surface"), "int", {"locusPickerConverted"});
	setAttr ($slider + "_surface" + ".locusPickerConverted") 2;
}
// ******************************************************************************************************************** //
global proc string locusPicker:getActiveCamera ()
{	
	string	$panelFocused 	= `getPanel -withFocus `;
	string	$panelType		= `getPanel -typeOf $panelFocused `;
	if($panelType == "modelPanel")	return ` modelPanel -q -camera $panelFocused`;
	else {
		string	$visiblePanels[]	= `getPanel -vis `;
		string	$candidates[];
		for($panel in $visiblePanels){
			if(`getPanel -typeOf $panel `=="modelPanel")	
				$candidates[size($candidates)] = $panel;
		}
		// if only one modelPanel is found, that must be it!
		if (size($candidates)==1) {
			return ` modelPanel -q -camera $candidates[0]`;
		}		
		else if (size($candidates)>1) {
			for ($cand in $candidates) {
				string $camera = `modelPanel -q -camera $cand`;
				if ((!`camera -q -orthographic $camera`))
					return $camera;
			}
		}
	}
	return "";
}
// ******************************************************************************************************************** //
global proc float[] locusPicker:getPositionsForCapture (string $selected[], string $camera, int $defaultSize) {
	float $positions[];
	// create locators at selection
	string	$loc[];
	for($sel in $selected){
		string $locThis = `createNode transform`;
		delete `pointConstraint $sel $locThis `;
		$loc[size($loc)] = $locThis;
	}
	string	$locWorld	= ` group $loc`;
	xform -cp $locWorld;
	parent -w $loc;
	// align orientation to the camera
	select -r $camera $locWorld;
	delete ` aimConstraint -offset 0 0 0 -weight 1 -aimVector 0 0 1 -upVector 0 1 0 -worldUpType "objectrotation" -worldUpVector 0 1 0 -worldUpObject $camera `;
	// move the locators back to origin
	parent $loc $locWorld;
	move -rpr 0 0 0 $locWorld;
	setAttr ($locWorld+".rotate") 0 0 0;
	float 	$bbMin[]	=	` getAttr ($locWorld+".boundingBoxMin") ` ;
	float 	$bbMax[]	=	` getAttr ($locWorld+".boundingBoxMax") ` ;
	parent -w $loc;
	makeIdentity -apply true -t 1 -r 1 -s 0 $locWorld ;
	move -r $bbMin[0] $bbMax[1] $bbMax[2] ($locWorld+".scalePivot") ($locWorld+".rotatePivot") ;
	parent $loc $locWorld;
	select -r $selected;	// revert selection
	
	// Estimate the scale factor of buttons to prevent them to overlap
	float $scaleFactor = locusPicker:getScaleFactor($loc, $defaultSize) / 10.0;
	//print ("Scale Factor: " + $scaleFactor + "\n");
	//if ($scaleFactor < 1)	$scaleFactor = 1.0;
	//else					print ("Scale Factor: " + $scaleFactor + "\n");
	
	for($i=0;$i<size($selected);$i++){
	    float	$pos[]	=	`xform -q -ws -t ($loc[$i]+".rotatePivot")`;
	    //print ($selected[$i] + ":\t" + ($pos[0] - $bbMin[0]) + "\t" + (($pos[1] - $bbMax[1])*-1) + "\n");
	    $positions[size($positions)] = ($pos[0] - $bbMin[0]) * $scaleFactor;
	    $positions[size($positions)] = ($pos[1] - $bbMax[1]) * -$scaleFactor;
	}
	delete $locWorld;
	return $positions;
}
// ******************************************************************************************************************** //
global proc float locusPicker:getScaleFactor (string $nodes[], int $buttSize)
{	
	float	$closest	=	99999.99;
	float	$min		=	0.0001;
	for($i = 0; $i<size($nodes);$i++){
		for($k = 0; $k<size($nodes);$k++){
			if($i != $k){
				float	$pos1[]=	`xform -q -ws -t ($nodes[$i]+".rotatePivot")`;
				float	$pos2[]=	`xform -q -ws -t ($nodes[$k]+".rotatePivot")`;
				$pos1[2] = 0.0; // exclude z-depth
				$pos2[2] = 0.0; // exclude z-depth
				float	$dist	=	rigGetDistance($pos1,$pos2);
				if($dist > $min){ // if too close, doesn't count
					if($dist < $closest)	$closest = $dist ;
				}
			}
		}
	}
	int		$gap	=	2 ;
	//print ("Closest Distance: " + $closest + "\n");
	float	$result	=	float($buttSize + $gap) / $closest;
	return	$result;
}
// ******************************************************************************************************************** //
global proc float rigGetDistance (float $startPos[], float $endPos[])
{
	float	$result		= 0.0;
 
	for($i = 0; $i < size($startPos); $i++)
	{
 		float $sum = $endPos[$i] - $startPos[$i] ;
		$result = $result + ($sum * $sum) ;
	}
 
 	$result	= sqrt($result);
 	return $result;
}
// ******************************************************************************************************************** //
global proc string locusPicker:snapshotView (string $path, string $type)
{
	string $evalMode[]	= `evaluationManager -q -mode`; 
	// print(">> evalMode: "+$evalMode[0]+"\n");
	evaluationManager -mode "off";
	int $t = `currentTime -q`;
	//print ("SNAPSHOT to " + $path + "\n");
	$path = `playblast -fr $t -cf $path -fo -fmt "image" -sqt 0 -cc 1 -v 0 -orn 0 -p 100 -c $type -qlt 100 -os`;
	//print ("SUCCESS to " + $path + "\n");
	evaluationManager -mode $evalMode[0];
	return $path;
}
// ******************************************************************************************************************** //
global proc locusPicker:alignGeoButtons (string $option)
{
	string $selected[] = `ls -sl`;
	string $geoButtons[];
	for ($sel in $selected)
	{
		if (`objExists ($sel+".locusPickerConverted")`)
			$geoButtons[size($geoButtons)] = $sel;
	}
	if (size($geoButtons)) {			
		float $total = 0.0;
		float $divider = 0.0;
		int	$axisInd = 0;
		string $axisFlag = ".tx";
		string $offsetAxisFlag = ".sx";
		if ($option=="horizontal") {
			$axisInd = 1 ;
			$axisFlag = ".ty";
			$offsetAxisFlag = ".sy";
		}
		for($geo in $geoButtons) {
			float $pos[] = `xform -q -ws -t $geo`;
			float $scaleFactor = `getAttr ($geo + $offsetAxisFlag)`;
			if ($option=="horizontal") $total += ($pos[$axisInd] - ($scaleFactor/2.0));
			else $total += ($pos[$axisInd] + ($scaleFactor/2.0));
			$divider += 1.0;
		}
		float $avg = $total / $divider;
		for($geo in $geoButtons) {
    		float $scaleFactor = `getAttr ($geo + $offsetAxisFlag)`;
    		if ($option=="horizontal") setAttr ($geo + $axisFlag) ($avg + ($scaleFactor/2.0));
    		else setAttr ($geo + $axisFlag) ($avg - ($scaleFactor/2.0));
    	}
	}
}
// ******************************************************************************************************************** //
global proc locusPicker:setGeoButtonsAverageSize (string $axis)
{
	string	$selected[] = `ls -sl`;
	string $geoButtons[];
	for ($sel in $selected)
	{
		if (`objExists ($sel+".locusPickerConverted")`)
			$geoButtons[size($geoButtons)] = $sel;
	}
	if (size($geoButtons)) {
		float	$total		=	0.0;
		float	$divider	=	0.0;
		for($i=0;$i<size($geoButtons);$i++){
			$total += ` getAttr ($geoButtons[$i]+".scale"+$axis) ` ;
			$divider += 1.0;
		}
		float	$avg	=	$total/$divider;
		for($i=0; $i<size($geoButtons); $i++){
			setAttr ($geoButtons[$i]+".scale"+$axis) $avg ;
		}
	}
}
// ******************************************************************************************************************** //
global proc locusPicker:setGeoButtonsAverageGap (string $axis)
{
	string	$selected[]	=	` ls -sl ` ;
	string $geoButtons[];
	for ($sel in $selected)
	{
		if (`objExists ($sel+".locusPickerConverted")`)
			$geoButtons[size($geoButtons)] = $sel;
	}
	if (size($geoButtons))
	{
		select -r $geoButtons;
		string	$selected[]	=	` ls -sl ` ;
	}
	else
		return;
	
	string $group = `group`;
	float 	$bbMin[] = `getAttr ($group+".boundingBoxMin")`;
	float 	$bbMax[] = `getAttr ($group+".boundingBoxMax")`;
	ungroup $group;
	float $width = $bbMax[0] - $bbMin[0];
	float $height = $bbMax[1] - $bbMin[1];
	for ($sel in $selected) {
	    float $scale[] = `xform -q -r -s $sel`;
	    $width = $width - $scale[0];
	    $height = $height - $scale[1];
	}
	float $wGap = $width / (size($selected) - 1);
	float $hGap = $height / (size($selected) - 1);
	
	$selected = locusPicker:sortByPosition($axis, $selected);
	for($i=1; $i<size($selected); $i++)
	{
	    float 	$bbMin[] = `getAttr ($selected[$i-1]+".boundingBoxMin")`;
	    float 	$bbMax[] = `getAttr ($selected[$i-1]+".boundingBoxMax")`;
	    if ($axis == "X")
	    	setAttr ($selected[$i] + ".tx") ($bbMax[0] + $wGap) ;
	    else if ($axis == "Y")
	    	setAttr ($selected[$i] + ".ty") ($bbMin[1] - $hGap) ;	    	
	}
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:sortByPosition(string $axis, string $nodes[])
{
	int	$posInd = 0;	
	if		($axis=="Y")	$posInd = 1;
	else if ($axis=="Z")	$posInd = 2;
	while(true){
		int	$isAllSorted = true;
		for($i=1;$i<size($nodes);$i++){
			float $posA[] = ` xform -q -ws -t ($nodes[$i-1]+".rotatePivot") ` ;
			float $posB[] = ` xform -q -ws -t ($nodes[$i]+".rotatePivot") ` ;
			int	$doSwap = false;
			if (($axis=="X")||($axis=="Z")){
				if ($posA[$posInd] > $posB[$posInd])	$doSwap = true;
			}
			else if ($posA[$posInd] < $posB[$posInd])	$doSwap = true;
				
			if ($doSwap){
				string $temp = $nodes[$i-1] ;
				$nodes[$i-1] = $nodes[$i] ;
				$nodes[$i] = $temp ;
				$isAllSorted = false;
			}
		}
		if($isAllSorted) return $nodes;
	}
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:mirrorGeoButtons (string $search, string $replace)
{
	string $result[];
	string $selected[]	= `ls -sl` ;
	string $geoButtons[];
	for ($sel in $selected)
	{
		if (`objExists ($sel+".locusPickerConverted")`)
			$geoButtons[size($geoButtons)] = $sel;
	}
	if (size($geoButtons))
	{
		select -r $geoButtons;
		string	$selected[]	=	` ls -sl ` ;
	}
	else
	{
		print ("nothing selected!!!\n");
		return $result;
	}
	
	string $dup[] = `duplicate -rr` ;
	string $group = `group -em` ;
	parent $dup $group;
	setAttr ($group + ".scaleX") -1;
	ungroup $group;
	clear($selected) ;
	select $dup;
	$selected = `ls -sl` ;
	string $attr = "node" ;
	string $plug;
	for($sel in $selected){
	    float 	$bbMin[] = `getAttr ($sel+".boundingBoxMin")`;
	    setAttr ($sel + ".sz") 1;
	    setAttr ($sel + ".ry") 0;
	    setAttr ($sel + ".tx") $bbMin[0];
	    $plug = ($sel+"."+$attr);
	    if (`objExists $plug`){
			string $cmd = `getAttr $plug`;
			string $data[];
			tokenize($cmd,",",$data);
	        for($i=0;$i<size($data);$i++)
				$data[$i] = substitute ($search, $data[$i], $replace) ;
			$node = "";
			for($i=0;$i<size($data)-1;$i++)
			    $node += ($data[$i] + ",");
			$node += $data[size($data)-1];
			setAttr -type "string" $plug $node;
		}
		$result[size($result)] = $sel;
	}
	return $result;
}
// ******************************************************************************************************************** //
global proc string[] locusPicker:getAllHierachyTransform () {	
	string $topNode = locusPicker:getTopTransform();
	if (size($topNode) == 0)		return {};
	string $allNodes[] = `listRelatives -ad -type transform $topNode`;
	return $allNodes;
}
// ******************************************************************************************************************** //
global proc string locusPicker:getTopTransform() {
    string $nodes[] = `ls -sl`;
    string $buffer[];
    while (`size($nodes)` > 0) {
        if ( catch ($buffer = `listRelatives -ap $nodes[0]`) ) {
            $nodes = {};
            break;
        }
        else {
            if (`size($buffer)` > 0)		$nodes = $buffer;
            else							break;
        }
    }
    return $nodes[0];
}
// ******************************************************************************************************************** //
global proc string locusPicker:getMatchedTransform (string $allNodes[], string $suffix) {
	for ($node in $allNodes)
	{
	    int $ends = endsWith($node, $suffix);
	    if ($ends == 1)    	return $node;
	}
	return $suffix;
}
// ******************************************************************************************************************** //
global proc string locusPicker:createShelfNode() {
	string 	$nodeName = "locusPicker_shelf";
			$nodeName = `createNode -n $nodeName dof`;
	locusPicker:addAttr($nodeName, "stringArray", {"bookmarkLabel"});
	locusPicker:addAttr($nodeName, "messageArray", {"bookmarkList"});
	return $nodeName;
}
// ******************************************************************************************************************** //
global proc locusPicker:reorderShelfNode(string $node, string $labels[], string $nodeList[]) {
	locusPicker:addAttr($node, "stringArray", {"bookmarkLabel"});
	locusPicker:addAttr($node, "messageArray", {"bookmarkList"});
	for ($i=0; $i<size($labels); $i++)
	{
		setAttr ($node+".bookmarkLabel["+$i+"]") -type "string" $labels[$i];
		connectAttr ($nodeList[$i]+".message") ($node+".bookmarkList["+$i+"]");
	}
}